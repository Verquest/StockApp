@page "/watchlist"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Syncfusion.Blazor.Navigations

@inject HttpClient Client
@inject NavigationManager NavigationManager 
@inject AuthenticationStateProvider authProvider
@inject ILogger<Watchlist> logger


<PageTitle>Watchlist</PageTitle>
<SfButton @onclick="@((args) => NavigateToDashboard())">
    Dashboard
</SfButton>
<h1>Watchlist</h1>
        
<SfGrid DataSource="@Stocks" AllowPaging="true" AllowSorting="true" Toolbar="@(new List<string>(){"Delete"})" @bind-Visible="@DoesUserHaveAnyStocksWatched">
    <GridEvents OnBatchDelete="DeleteFromWatchList" TValue="StockWatchlist" />
    <GridPageSettings PageSize="5"/>
    <GridEditSettings AllowDeleting="true" ShowDeleteConfirmDialog="true" Mode="EditMode.Batch"/>
    <GridColumns>
        <GridColumn HeaderText="Logo" TextAlign="TextAlign.Center" Width="100">
            <Template> 
                @{
                    var stock = (context as StockWatchlist);
                    var url = stock.LogoURL;
                    <div class="image"> 
                        <img src="@url" alt="logo" height="48" width="48"/> 
                    </div> 
                } 
            </Template> 
        </GridColumn>
        <GridColumn Field=@nameof(StockWatchlist.Name) HeaderText="Name" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(StockWatchlist.Symbol) HeaderText="Symbol" TextAlign="TextAlign.Center" IsPrimaryKey="true"></GridColumn>
        <GridColumn Field=@nameof(StockWatchlist.Tags) HeaderText="Tags" TextAlign="TextAlign.Center"></GridColumn>
        <GridColumn Field=@nameof(StockWatchlist.Country) HeaderText="Country" TextAlign="TextAlign.Center"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    List<StockWatchlist> Stocks { get; set; }
    bool DoesUserHaveAnyStocksWatched { get; set; } = true;

    protected async override Task OnInitializedAsync()
    {
        var response = await Client.GetAsync(new Uri($"api/users", UriKind.Relative));
        if (!response.IsSuccessStatusCode)
            return;
        
        var stocks = JsonConvert.DeserializeObject<List<StockDTO>>(response.Content.ReadAsStringAsync().Result);
       
        if (stocks == null)
            DoesUserHaveAnyStocksWatched = false;

        Stocks = new List<StockWatchlist>();
        foreach(StockDTO stock in stocks)
        {
            Stocks.Add(new StockWatchlist
                {
                    LogoURL = stock.LogoURL,
                    Name = stock.Name,
                    Symbol = stock.Symbol,
                    Tags = stock.Tags,
                    Country = stock.Country
                });
        }
    }
    public void NavigateToDashboard()
    {
        NavigationManager.NavigateTo("/dashboard");
    }


    public async Task DeleteFromWatchList(BeforeBatchDeleteArgs<StockWatchlist> args)
    {
        var symbol = args.RowData.Symbol;
        
        logger.LogWarning($"api/users/{symbol}");
        var resp = await Client.DeleteAsync(new Uri($"api/users/{symbol}", UriKind.Relative));
        logger.LogWarning(resp.StatusCode.ToString());

        
        StockWatchlist stock = args.RowData as StockWatchlist;
        Stocks.Remove(stock);
    }

    public class StockWatchlist
    {
        public string LogoURL { get; set; }
        public string Name { get; set; }
        public string Symbol { get; set; }
        public string Tags { get; set; }
        public string Country { get; set; }
    }
}
