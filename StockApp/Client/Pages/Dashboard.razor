@page "/dashboard"
@page "/dashboard/{StockName}"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers

@inject HttpClient Client
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime JsRuntime
@inject ILogger<Dashboard> logger
@inject NavigationManager NavigationManager 


<AuthorizeView>
    <Authorized>
        <PageTitle>Dashboard</PageTitle>
        <SfButton @onclick="@((args) => NavigateToWatchlist())">
                    Watchlist
        </SfButton>
        <h1>Dashboard</h1>
        <div>
        <SfAutoComplete TItem="StockSearchDTO" TValue="string" DataSource="Stocks" Placeholder="Select a stock" @bind-Value="@StockName">
            <AutoCompleteEvents TValue="string" TItem="StockSearchDTO" OnValueSelect="@OnValueSelectHandler"></AutoCompleteEvents>
            <AutoCompleteFieldSettings Value="Symbol" Text="Name"></AutoCompleteFieldSettings>
        </SfAutoComplete>
        </div>
        @if (Stock != null)
        {
        <div class="parent">
            <div class="child">
                <img src="@Stock.LogoURL" style="margin-bottom: 10px; width: 96px; height: 96px"/>
            </div>
            <div class="child">
                <h1 style="text-align: left">@Stock.Name</h1>  
                <h4>@Stock.Tags</h4>
            </div>
            <div class="child-right">
                <h5 style="display: inline-block">Add to watchlist</h5>
                <SfButton @onclick="@((args) => AddToWatchlist())">
                    +
                </SfButton>
            </div>
        </div>
        }
        @if(StockName!=null)
        {
            <div>
                <SfStockChart Title="@StockName" @ref="chart">
                    <StockChartSeriesCollection>
                        <StockChartSeries Type="@ChartSeriesType.HiloOpenClose" DataSource="@StockDetails" XName="Date" High="High" Low="Low" Open="Open" Close="Close"></StockChartSeries>
                    </StockChartSeriesCollection>
                </SfStockChart>
            </div>
        }
        @if(Stock != null)
        {
        <div style="display:flex; height: 100%">
            <div style="flex:1">
                <table>
                    <tr>
                        <th>From</th>
                        <td>@UpdateTime</td>
                    </tr>
                    <tr>
                        <th>Symbol</th>
                        <td>@Stock.Symbol</td>
                    </tr>
                    <tr>
                        <th>Open</th>
                        <td>@Stock.Open</td>
                    </tr>
                    <tr>
                        <th>Close</th>
                        <td>@Stock.Close</td>
                    </tr>
                    <tr>
                        <th>Low</th>
                        <td>@Stock.Low</td>
                    </tr>
                    <tr>
                        <th>High</th>
                        <td>@Stock.High</td>
                    </tr>
                    <tr>
                        <th>Volume</th>
                        <td>@Stock.Volume</td>
                    </tr>
                </table>
            </div>
            @if(Articles!=null){
                <div>
                        <h3>News</h3>
                        <ul>
                            @foreach (var news in Articles)
                            {
                                <li>
                                    <a href="@news.URL">@news.Title</a>
                                </li>
                            }
                        </ul>
                </div>
            }
        </div>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? StockName { get; set; }
    public StockDTO? Stock { get; set; }
    public List<ArticleDTO>? Articles { get; set; }
    public DateTime UpdateTime { get; set; }
    List<StockSearchDTO> Stocks { get; set; }
    List<StockData> StockDetails { get; set; }
    SfStockChart chart;

    protected async override Task OnInitializedAsync()
    {
        var stocks = await Client.GetFromJsonAsync<List<StockSearchDTO>>(new Uri("api/stocks", UriKind.Relative));
        Stocks = new List<StockSearchDTO>();
        foreach(StockSearchDTO stock in stocks)
        {
            Stocks.Add(new StockSearchDTO
                {
                    Name = stock.Name,
                    Symbol = stock.Symbol,
                    Exchange = stock.Exchange,
                    AssetType = stock.AssetType
                });
        }
    }

    private async Task OnValueSelectHandler(Syncfusion.Blazor.DropDowns.SelectEventArgs<StockSearchDTO> args)
    {
        NavigationManager.NavigateTo($"/dashboard/{args.ItemData.Symbol}");
        await LoadChartData();
        StateHasChanged();
    }
    private async Task LoadChartData()
    {
        var stockInfo = await GetTickers(StockName);
        Articles = await GetArticles(StockName);
        if(stockInfo == null)
        {
            await JsRuntime.InvokeAsync<object>("alert", new String("The stock you chose is unavailable."));
            return;
        }
        StockDetails = new List<StockData>();
        logger.LogWarning("count:" + stockInfo.Tickers.Count());
        foreach(TickerDTO ticker in stockInfo.Tickers)
        {
            DateTime dt = DateTimeOffset.FromUnixTimeMilliseconds(ticker.Date).DateTime;
            StockDetails.Add(new StockData
            {
                Date = dt,
                Open = ticker.Open,
                High = ticker.High,
                Low = ticker.Low,
                Close = ticker.Close,
                Volume = ticker.Volume
            });
        }
        chart.UpdateStockChart();
    }
    private async Task<StockDTO> GetTickers(string symbol)
    {
        var response = await Client.GetAsync(new Uri($"api/stocks/{symbol}", UriKind.Relative));
        if (!response.IsSuccessStatusCode)
            return null;
        var stock = JsonConvert.DeserializeObject<StockDTO>(response.Content.ReadAsStringAsync().Result);
        DateTime dt = DateTimeOffset.FromUnixTimeSeconds(stock.Date).DateTime;
        UpdateTime = dt;
        Stock = stock;
        return stock;
    }
    
    public async Task<List<ArticleDTO>> GetArticles(string symbol)
    {
        var response = await Client.GetAsync(new Uri($"api/articles/{symbol}", UriKind.Relative));
        if (!response.IsSuccessStatusCode)
            return null;
        var articles = JsonConvert.DeserializeObject<List<ArticleDTO>>(response.Content.ReadAsStringAsync().Result);
        return new List<ArticleDTO>(articles.OrderByDescending(e => e.DatePublished).Take(7));
    }
    public void NavigateToWatchlist()
    {
        NavigationManager.NavigateTo("/watchlist");
    }
    public async Task AddToWatchlist()
    {
        var response = await Client.PostAsync(new Uri($"api/users/{StockName}", UriKind.Relative), null);
        if (!response.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeAsync<object>("alert", new String("You are already watching this stock."));
            return;
        }
    }

    public class StockData
    {
        public DateTime Date { get; set; }
        public Double Open { get; set; }
        public Double High { get; set; }
        public Double Low { get; set; }
        public Double Close { get; set; }
        public Double Volume { get; set; }
    }
}
